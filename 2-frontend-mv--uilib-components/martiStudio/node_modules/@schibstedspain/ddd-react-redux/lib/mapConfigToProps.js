'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapConfigToProps = function mapConfigToProps() {
  for (var _len = arguments.length, configs = Array(_len), _key = 0; _key < _len; _key++) {
    configs[_key] = arguments[_key];
  }

  return function (Target) {
    var _class, _temp;

    var DDDConfigInjector = (_temp = _class = function (_Component) {
      (0, _inherits3.default)(DDDConfigInjector, _Component);

      function DDDConfigInjector() {
        (0, _classCallCheck3.default)(this, DDDConfigInjector);
        return (0, _possibleConstructorReturn3.default)(this, (DDDConfigInjector.__proto__ || (0, _getPrototypeOf2.default)(DDDConfigInjector)).apply(this, arguments));
      }

      (0, _createClass3.default)(DDDConfigInjector, [{
        key: 'render',
        value: function render() {
          var domain = this.context.domain;

          var values = configs.reduce(function (values, config) {
            values[config + 'Config'] = domain.get('config').get(config);
            return values;
          }, {});

          return _react2.default.createElement(Target, (0, _extends3.default)({}, this.props, values));
        }
      }]);
      return DDDConfigInjector;
    }(_react.Component), _class.displayName = 'mapConfigToProps(' + Target.displayName + ')', _class.contextTypes = {
      domain: _propTypes2.default.object.isRequired
    }, _temp);


    return DDDConfigInjector;
  };
};

exports.default = mapConfigToProps;