import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import { Mocker, Mock } from './mockerInterface';
import sinon from 'sinon';

var ClientMocker =
/*#__PURE__*/
function (_Mocker) {
  _inheritsLoose(ClientMocker, _Mocker);

  function ClientMocker() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Mocker.call.apply(_Mocker, [this].concat(args)) || this;
    _this._server = null;

    _this._failIfServerWasNotCreated = function () {
      if (!_this._server) {
        throw new Error('You should call create() first');
      }
    };

    return _this;
  }

  var _proto = ClientMocker.prototype;

  _proto.create = function create() {
    this._server = sinon.fakeServer.create();
    this._server.respondImmediately = true;
  };

  _proto.restore = function restore() {
    this._failIfServerWasNotCreated();

    this._server.restore();
  };

  _proto.httpMock = function httpMock(baseUrl) {
    this._failIfServerWasNotCreated();

    return new ClientMock(this._server, baseUrl);
  };

  return ClientMocker;
}(Mocker);

var ClientMock =
/*#__PURE__*/
function (_Mock) {
  _inheritsLoose(ClientMock, _Mock);

  function ClientMock(server, baseUrl) {
    var _this2;

    _this2 = _Mock.call(this) || this;

    _this2._responseResolver = function (response, statusCode, headers) {
      if (headers === void 0) {
        headers = {
          'Content-Type': 'application/json'
        };
      }

      return [statusCode, headers, JSON.stringify(response)];
    };

    _this2._server = server;
    _this2._isRegexp = false;
    _this2._baseUrl = baseUrl;
    _this2._method = null;
    _this2._query = '';
    _this2._path = null;
    return _this2;
  }

  var _proto2 = ClientMock.prototype;

  _proto2.get = function get(path) {
    this._method = 'GET';
    this._path = path;
    return this;
  };

  _proto2.getRegexp = function getRegexp(path) {
    this.get(path);
    this._isRegexp = true;
    return this;
  };

  _proto2.post = function post(path) {
    this._method = 'POST';
    this._path = path;
    return this;
  };

  _proto2.put = function put(path) {
    this._method = 'PUT';
    this._path = path;
    return this;
  };

  _proto2.delete = function _delete(path) {
    this._method = 'DELETE';
    this._path = path;
    return this;
  };

  _proto2.query = function query(queryObject) {
    this._query = '?' + Object.keys(queryObject).reduce(function (acc, param) {
      var value = queryObject[param];
      acc.push(param + "=" + value);
      return acc;
    }, []).join('&');
    return this;
  };

  _proto2.reply = function reply(response, statusCode, headers) {
    if (statusCode === void 0) {
      statusCode = 200;
    }

    this._server.respondWith(this._method, this._isRegexp ? RegExp("" + this._baseUrl + this._path + this._query) : "" + this._baseUrl + this._path + this._query, this._responseResolver(response, statusCode, headers));
  };

  return ClientMock;
}(Mock);

export default ClientMocker;