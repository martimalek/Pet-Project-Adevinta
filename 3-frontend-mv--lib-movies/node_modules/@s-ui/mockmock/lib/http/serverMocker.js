import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import { Mocker, Mock } from './mockerInterface';
import nock from 'nock';

var ServerMocker =
/*#__PURE__*/
function (_Mocker) {
  _inheritsLoose(ServerMocker, _Mocker);

  function ServerMocker() {
    return _Mocker.apply(this, arguments) || this;
  }

  var _proto = ServerMocker.prototype;

  _proto.httpMock = function httpMock(baseUrl) {
    return new ServerMock(nock, baseUrl);
  };

  return ServerMocker;
}(Mocker);

var ServerMock =
/*#__PURE__*/
function (_Mock) {
  _inheritsLoose(ServerMock, _Mock);

  function ServerMock(server, baseUrl) {
    var _this;

    _this = _Mock.call(this) || this;
    _this._server = server;
    _this._baseUrl = baseUrl;
    _this._method = null;
    _this._query = null;
    _this._path = null;
    return _this;
  }

  var _proto2 = ServerMock.prototype;

  _proto2.get = function get(path) {
    this._method = 'get';
    this._path = path;
    return this;
  };

  _proto2.getRegexp = function getRegexp(path) {
    this.get(path);
    this._path = RegExp(path);
    return this;
  };

  _proto2.post = function post(path) {
    this._method = 'post';
    this._path = path;
    return this;
  };

  _proto2.put = function put(path) {
    this._method = 'put';
    this._path = path;
    return this;
  };

  _proto2.delete = function _delete(path) {
    this._method = 'delete';
    this._path = path;
    return this;
  };

  _proto2.query = function query(queryObject) {
    this._query = queryObject;
    return this;
  };

  _proto2.reply = function reply(response, statusCode) {
    if (statusCode === void 0) {
      statusCode = 200;
    }

    var mock = this._server(this._baseUrl)[this._method](this._path);

    if (this._query) {
      mock.query(this._query);
    }

    mock.reply(statusCode, JSON.stringify(response));
  };

  return ServerMock;
}(Mock);

export default ServerMocker;